<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GraphQL.Client.Extensions</name>
    </assembly>
    <members>
        <member name="T:GraphQL.Client.Extensions.GraphQLClientExtensions">
            <summary>
            Extensions for the <see cref="T:GraphQL.Client.GraphQLClient" /> class.
            </summary>
        </member>
        <member name="M:GraphQL.Client.Extensions.GraphQLClientExtensions.Get``1(GraphQL.Client.GraphQLClient,GraphQL.Client.Extensions.IQuery,System.String,System.Threading.CancellationToken)">
            <summary>
            Given a type return the results of a GraphQL query in it. If
            the type is a string then will return the JSON string. The resultName
            will be automatically set the Name or Alias name if not specified.
            For Raw queries you must set the resultName param OR set the Name() in
            the query to match. This handles server connection here!
            </summary>
            <typeparam name="T">Data Type, typically a list of the record but not always.</typeparam>
            <param name="gqlClient"></param>
            <param name="query"></param>
            <param name="resultName">Override of the Name/Alias of the query</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The type of object stuffed with data from the query</returns>
            <exception cref="T:System.ArgumentException">Dupe Key, missing parts or empty parts of a query</exception>
            <exception cref="T:System.ArgumentNullException">Invalid Configuration</exception>
        </member>
        <member name="M:GraphQL.Client.Extensions.GraphQLClientExtensions.Post``1(GraphQL.Client.GraphQLClient,GraphQL.Client.Extensions.IQuery,System.String,System.Threading.CancellationToken)">
            <summary>
            Given a type return the results of a GraphQL query in it. If
            the type is a string then will return the JSON string. The resultName
            will be automatically set the Name or Alias name if not specified.
            For Raw queries you must set the resultName param OR set the Name() in
            the query to match. This handles server connection here!
            </summary>
            <typeparam name="T">Data Type, typically a list of the record but not always.
            </typeparam>
            <param name="gqlClient"></param>
            <param name="query"></param>
            <param name="resultName">Override of the Name/Alias of the query</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>The type of object stuffed with data from the query</returns>
            <exception cref="T:System.ArgumentException">Dupe Key, missing parts or empty parts of a query</exception>
            <exception cref="T:System.ArgumentNullException">Invalid Configuration</exception>
        </member>
        <member name="T:GraphQL.Client.Extensions.IQuery">
            <summary>
            Query interface
            </summary>
        </member>
        <member name="P:GraphQL.Client.Extensions.IQuery.Name">
            <summary>
            Gets the query name.
            </summary>
        </member>
        <member name="P:GraphQL.Client.Extensions.IQuery.AliasName">
            <summary>
            Gets the query alias name.
            </summary>
        </member>
        <member name="M:GraphQL.Client.Extensions.IQuery.Build">
            <summary>
            Builds the query.
            </summary>
            <returns>The GraphQL Query String, without outer enclosing block</returns>
            <exception cref="T:System.ArgumentException">Must have a 'Name' specified in the Query</exception>
            <exception cref="T:System.ArgumentException">Must have a one or more 'Select' fields in the Query</exception>
        </member>
        <member name="T:GraphQL.Client.Extensions.IQuery`1">
            <summary>
            Query of TSource interface
            </summary>
        </member>
        <member name="P:GraphQL.Client.Extensions.IQuery`1.SelectList">
            <summary>
            Gets the select list.
            </summary>
        </member>
        <member name="P:GraphQL.Client.Extensions.IQuery`1.ArgumentsMap">
            <summary>
            Gets the arguments map.
            </summary>
        </member>
        <member name="M:GraphQL.Client.Extensions.IQuery`1.Alias(System.String)">
            <summary>
            Sets the query alias name.
            </summary>
            <param name="alias">The alias name</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.IQuery`1.AddField``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds a field to the query.
            </summary>
            <typeparam name="TProperty">Property type</typeparam>
            <param name="selector">Field selector</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.IQuery`1.AddField(System.String)">
            <summary>
            Adds a field to the query.
            </summary>
            <param name="field">Field name</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.IQuery`1.AddField``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{GraphQL.Client.Extensions.IQuery{``0},GraphQL.Client.Extensions.IQuery{``0}})">
            <summary>
            Adds a sub-object field to the query.
            </summary>
            <typeparam name="TSubSource">Sub-object type</typeparam>
            <param name="selector">Field selector</param>
            <param name="build">Sub-object query building function</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.IQuery`1.AddField``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{GraphQL.Client.Extensions.IQuery{``0},GraphQL.Client.Extensions.IQuery{``0}})">
            <summary>
            Adds a sub-list field to the query.
            </summary>
            <typeparam name="TSubSource">Sub-list object type</typeparam>
            <param name="selector">Field selector</param>
            <param name="build">Sub-object query building function</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.IQuery`1.AddField``1(System.String,System.Func{GraphQL.Client.Extensions.IQuery{``0},GraphQL.Client.Extensions.IQuery{``0}})">
            <summary>
            Adds a sub-object field to the query.
            </summary>
            <typeparam name="TSubSource">Sub-object type</typeparam>
            <param name="field">Field name</param>
            <param name="build">Sub-object query building function</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.IQuery`1.AddArgument(System.String,System.Object)">
            <summary>
            Adds a new argument to the query.
            </summary>
            <param name="key">Argument name</param>
            <param name="value">Value</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.IQuery`1.AddArguments(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds arguments to the query.
            </summary>
            <param name="arguments">Dictionary argument</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.IQuery`1.AddArguments``1(``0)">
            <sumary>
            Adds arguments to the query.
            </sumary>
            <typeparam name="TArguments">Arguments object type</typeparam>
            <param name="arguments">Arguments object</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="T:GraphQL.Client.Extensions.IQueryStringBuilder">
             <summary>
             Builds a GraphQL query from the Query Object. For parameters it
             support simple parameters, ENUMs, Lists, and Objects.
             For selections fields it supports sub-selects with params as above.
            
             Most all structures can be recursive, and are unwound as needed
             </summary>
        </member>
        <member name="M:GraphQL.Client.Extensions.IQueryStringBuilder.Clear">
            <summary>
            Clear the QueryStringBuilder and all that entails
            </summary>
        </member>
        <member name="M:GraphQL.Client.Extensions.IQueryStringBuilder.Build``1(GraphQL.Client.Extensions.IQuery{``0})">
            <summary>
            Build the entire query into a string. This will take
            the query object and build a graphql query from it. This
            returns the query, but not the outer block. This is done so
            you can use the output to batch the queries
            </summary>
            <param name="query">The Query</param>
            <returns>GraphQL query string without outer block</returns>
        </member>
        <member name="T:GraphQL.Client.Extensions.Query`1">
            <summary>
            The Query Class is a simple class to build out graphQL
            style queries. It will build the parameters and field lists
            similar in a way you would use a SQL query builder to assemble
            a query. This will maintain the response for the query
            </summary>
        </member>
        <member name="P:GraphQL.Client.Extensions.Query`1.SelectList">
            <summary>
            Gets the select list.
            </summary>
        </member>
        <member name="P:GraphQL.Client.Extensions.Query`1.ArgumentsMap">
            <summary>
            Gets the arguments map.
            </summary>
        </member>
        <member name="P:GraphQL.Client.Extensions.Query`1.Name">
            <summary>
            Gets the query name.
            </summary>
        </member>
        <member name="P:GraphQL.Client.Extensions.Query`1.AliasName">
            <summary>
            Gets the alias name.
            </summary>
        </member>
        <member name="P:GraphQL.Client.Extensions.Query`1.QueryStringBuilder">
            <summary>
            Gets the query string builder.
            </summary>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Client.Extensions.Query`1" /> class.
            </summary>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.#ctor(System.String,GraphQL.Client.Extensions.QueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:GraphQL.Client.Extensions.Query`1" /> class.
            </summary>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.Alias(System.String)">
            <summary>
            Sets the query alias name.
            </summary>
            <param name="alias">The alias name</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.AddField``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Adds a field to the query.
            </summary>
            <typeparam name="TProperty">Property type</typeparam>
            <param name="selector">Field selector</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.AddField(System.String)">
            <summary>
            Adds a field to the query.
            </summary>
            <param name="field">Field name</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.AddField``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{GraphQL.Client.Extensions.IQuery{``0},GraphQL.Client.Extensions.IQuery{``0}})">
            <summary>
            Adds a sub-object field to the query.
            </summary>
            <typeparam name="TSubSource">Sub-object type</typeparam>
            <param name="selector">Field selector</param>
            <param name="build">Sub-object query building function</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.AddField``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IEnumerable{``0}}},System.Func{GraphQL.Client.Extensions.IQuery{``0},GraphQL.Client.Extensions.IQuery{``0}})">
            <summary>
            Adds a sub-list field to the query.
            </summary>
            <typeparam name="TSubSource">Sub-list object type</typeparam>
            <param name="selector">Field selector</param>
            <param name="build">Sub-object query building function</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.AddField``1(System.String,System.Func{GraphQL.Client.Extensions.IQuery{``0},GraphQL.Client.Extensions.IQuery{``0}})">
            <summary>
            Adds a sub-object field to the query.
            </summary>
            <typeparam name="TSubSource">Sub-object type</typeparam>
            <param name="field">Field name</param>
            <param name="build">Sub-object query building function</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.AddArgument(System.String,System.Object)">
            <summary>
            Adds a new argument to the query.
            </summary>
            <param name="key">Argument name</param>
            <param name="value">Value</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.AddArguments(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Adds arguments to the query.
            </summary>
            <param name="arguments">Dictionary argument</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.AddArguments``1(``0)">
            <sumary>
            Adds arguments to the query.
            </sumary>
            <typeparam name="TArguments">Arguments object type</typeparam>
            <param name="arguments">Arguments object</param>
            <returns>IQuery{TSource}</returns>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.Build">
            <summary>
            Builds the query.
            </summary>
            <returns>The GraphQL Query String, without outer enclosing block</returns>
            <exception cref="T:System.ArgumentException">Must have a 'Name' specified in the Query</exception>
            <exception cref="T:System.ArgumentException">Must have a one or more 'Select' fields in the Query</exception>
        </member>
        <member name="M:GraphQL.Client.Extensions.Query`1.GetPropertyName(System.Reflection.PropertyInfo)">
            <summary>
            Tries to get property name from JSON property attribute or from optional formater.
            </summary>
            <param name="property">Property</param>
            <returns>String</returns>
        </member>
        <member name="T:GraphQL.Client.Extensions.QueryOptions">
            <summary>
            Query options class
            </summary>
        </member>
        <member name="P:GraphQL.Client.Extensions.QueryOptions.Formater">
            <summary>
            Gets or sets the formater
            </summary>
        </member>
        <member name="P:GraphQL.Client.Extensions.QueryOptions.QueryStringBuilderFactory">
            <summary>
            Gets or sets the query string builder factory
            </summary>
        </member>
        <member name="T:GraphQL.Client.Extensions.QueryFormaters">
            <summary>
            Query formater class
            </summary>
        </member>
        <member name="F:GraphQL.Client.Extensions.QueryFormaters.CamelCaseFormater">
            <summary>
            Camel case formater
            </summary>
        </member>
        <member name="T:GraphQL.Client.Extensions.QueryStringBuilder">
             <summary>
             Builds a GraphQL query from the Query Object. For parameters it
             support simple parameters, ENUMs, Lists, and Objects.
             For selections fields it supports sub-selects with params as above.
            
             Most all structures can be recursive, and are unwound as needed
             </summary>
        </member>
        <member name="P:GraphQL.Client.Extensions.QueryStringBuilder.QueryString">
            <summary>
            The query string builder.
            </summary>
        </member>
        <member name="M:GraphQL.Client.Extensions.QueryStringBuilder.Clear">
            <summary>
            Clear the QueryStringBuilder and all that entails
            </summary>
        </member>
        <member name="M:GraphQL.Client.Extensions.QueryStringBuilder.BuildQueryParam(System.Object)">
            <summary>
            Recurse an object which could be a primitive or more
            complex structure. This will return a string of the value
            at the current level. Recursion terminates when at a terminal
            (primitive).
            </summary>
            <param name="value"></param>
            <returns>string</returns>
            <exception cref="T:System.IO.InvalidDataException">Invalid Object Type in Param List</exception>
        </member>
        <member name="M:GraphQL.Client.Extensions.QueryStringBuilder.AddParams``1(GraphQL.Client.Extensions.IQuery{``0})">
            <summary>
            This take all parameter data
            and builds the string. This will look in the query and
            use the WhereMap for the list of data. The data can be
            most any type as long as it's one that we support. Will
            resolve nested structures
            </summary>
            <param name="query">The Query</param>
        </member>
        <member name="M:GraphQL.Client.Extensions.QueryStringBuilder.AddFields``1(GraphQL.Client.Extensions.IQuery{``0})">
            <summary>
            Adds fields to the query sting. This will use the SelectList
            structure from the query to build the graphql select list. This
            will recurse as needed to pick up sub-selects that can contain
            parameter lists.
            </summary>
            <param name="query">The Query</param>
            <exception cref="T:System.ArgumentException">Invalid Object in Field List</exception>
        </member>
        <member name="M:GraphQL.Client.Extensions.QueryStringBuilder.Build``1(GraphQL.Client.Extensions.IQuery{``0})">
            <summary>
            Build the entire query into a string. This will take
            the query object and build a graphql query from it. This
            returns the query, but not the outer block. This is done so
            you can use the output to batch the queries
            </summary>
            <param name="query">The Query</param>
            <returns>GraphQL query string without outer block</returns>
        </member>
    </members>
</doc>
